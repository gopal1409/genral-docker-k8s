###lets create a dynamic provisoner
  
kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml

#check the storage class
  root@ip-172-31-116-255:~# kubectl get sc
NAME         PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
local-path   rancher.io/local-path   Delete          WaitForFirstConsumer   false                  15s
#headless service is always required to create a stateful set 
root@ip-172-31-116-255:~# nano postgres-service.yml

apiVersion: v1 
kind: Service 
metadata:
  name: postgres 
  labels:
    app: postgres
spec:
  ports:
    - name: postgres 
      port: 5432
  clusterIP: None #we want to resolve the pod defination using healdless using dns name of the pod
  selector:
    app: postgres
root@ip-172-31-116-255:~# kubectl apply -f postgres-service.yml
service/postgres created
root@ip-172-31-116-255:~# kubectl get svc
NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
kubernetes                ClusterIP   10.96.0.1       <none>        443/TCP        43h
my-first-deploy-service   NodePort    10.111.67.200   <none>        80:31193/TCP   23h
my-first-service          NodePort    10.101.89.210   <none>        80:30795/TCP   25h
postgres                  ClusterIP   None            <none>        5432/TCP       4s
root@ip-172-31-116-255:~#

##lets create the postgress db
nano pg.yml
###############################
####pgdeploy.yml
###############################
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  ports:
    - name: postgres
      port: 5432
  clusterIP: None
  selector:
    app: postgres
###deploy the postgresssql
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  serviceName: postgres
  replicas: 3
  template:
    metadata:
      labels:
        app: postgres
    spec:
      initContainers:
        - name: postgres-init
          image: postgres:latest
          command:
          - bash
          - "-c"
          - |
            set -ex
            [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
            ordinal=${BASH_REMATCH[1]}
            if [[ $ordinal -eq 0 ]]; then
              printf "I am the primary"
            else
              printf "I am a read-only replica"
            fi
      containers:
        - name: postgres
          image: postgres:latest
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          ports:
          - name: postgres
            containerPort: 5432
          livenessProbe:
            exec:
              command:
                - "sh"
                - "-c"
                - "pg_isready --host $POD_IP"
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - "sh"
                - "-c"
                - "pg_isready --host $POD_IP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
          volumeMounts:
          - name: data
            mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "local-path"
      resources:
        requests:
          storage: 1Gi
##apply it 
kubectl apply -f pgdeploy.yml
##############################################
  588  kubectl get statefulset
#this will give you three pod which are in number
 590  kubectl get pod
##against that it will create three volumes also
  591  kubectl get pvc

###if you loging to the second machine
[sudo] password for lab-user:
root@ip-172-31-117-25:~# cd /opt
root@ip-172-31-117-25:/opt# ls
cni  containerd  google  local-path-provisioner
root@ip-172-31-117-25:/opt# cd local-path-provisioner/
root@ip-172-31-117-25:/opt/local-path-provisioner# ls
pvc-294d8bb6-9391-4aed-8e1e-ffe7d77d8310_default_data-postgres-1  pvc-ec467f50-4f84-4cb3-93f2-8ffeae1ab49d_default_data-postgres-2
pvc-b66e8221-5814-4b2f-b046-b1d0efdbc7d6_default_data-postgres-0
root@ip-172-31-117-25:/opt/local-path-provisioner#
##lets check the logs from init contianer for specific postgress db
ngest=0.002 s, average=0.001 s; distance=269 kB, estimate=269 kB; lsn=0/15286B8, redo lsn=0/1528660
root@ip-172-31-116-255:~# kubectl logs postgres-0 -c postgres-init
++ hostname
+ [[ postgres-0 =~ -([0-9]+)$ ]]
+ ordinal=0
+ [[ 0 -eq 0 ]]
+ printf 'I am the primary'
I am the primaryroot@ip-172-31-116-255:~# kubectl logs postgres-1 -c postgres-init
++ hostname
+ [[ postgres-1 =~ -([0-9]+)$ ]]
+ ordinal=1
+ [[ 1 -eq 0 ]]
+ printf 'I am a read-only replica'
I am a read-only replicaroot@ip-172-31-116-255:~# kubectl logs postgres-2 -c postgres-init
I am a read-only replica++ hostname
+ [[ postgres-2 =~ -([0-9]+)$ ]]
+ ordinal=2
+ [[ 2 -eq 0 ]]
+ printf 'I am a read-only replica'
root@ip-172-31-116-255:~#

