##verify the docker is working or not 
  docker --version
  systemctl status docker
  ##press q to come out
##lets create our first container
sudo -i
docker
  23  docker container run --publish 80:80 --detach nginx
   24  docker ps
##lets create a db container

  41  docker container run -d -p 3306:3306 -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql
   42  docker ps
   #we will login inside the cotnainer using exec it means interactive terminal
   44  docker exec -it 67936849a4b8 bash
###once you login 
mysql -u root -p
##just press enter 
show databases;
##to exit
exit 
exit
##withought detach we will create a container
 docker container run --publish 82:80 nginx
#################container running as process 
58  docker run --name mongo -d mongo
   59  docker ps
##check the process id of container
   60  docker top mongo
#####match the process id of the contianer from the below mentioned command
   61  ps aux
###lets kill the process id and check the contianer also go down or not 
 64  kill -9 13411
##the below command will show that the container is in down state
   67  docker ps -a
##container networking
  74  docker ps
   75  docker inspect 679
   76  docker ps
   77  docker inspect cf8
   78  docker network ls
#this will show that the contianer are running with different ip
   79  docker network inspect bridge
##expose port should be always unique
#this will not work as a previous container is already running on port 81
docker ps
     84  docker run -p 81:80 -d httpd
#lets create few more container 
   85  docker run -d httpd
 85  docker run -d httpd

 85  docker run -d httpd
###the below command will show all the three container running on same port as they are internal
   86  docker ps
   87  docker network ls
   88  docker network inspect bridge
##create a custom network create two container inside the custom network
117  docker network create myapp_network
  118  docker run -d --name new_nginx --network myapp_network nginx:alpine
  119  docker run -d --name old_nginx --network myapp_network nginx:alpine
#check both the contianer are in same network or not
  123  docker network inspect myapp_network

  120  docker exec -it new_nginx curl old_nginx
  121  docker exec -it old_nginx curl new_nginx
#volumes in mysql 
  130  docker container run -d --name db -e MYSQL_ALLOW_EMPTY_PASSWORD=true -v mysql-db:/var/lib/mysql mysql:9
  131  docker ps
  132  docker exec -it db bash
mysql -u root -p
create database general;
show database general;
exit
exit
###############lets see where did this database is created 
 134  docker volume ls
  135  docker volume inspect mysql-db
  136  cd /var/lib/docker/volumes/mysql-db/_data
  137  ls
###this will show the general db
  138  docker exec -it db bash
##login again and check the database
mysql -u root -p
#####create a new database
create database testdb;
exit
exit
##do ls 
ls
##you will see the new db

